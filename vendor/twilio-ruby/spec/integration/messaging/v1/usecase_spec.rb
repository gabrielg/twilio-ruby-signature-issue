##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'Usecase' do
  it "can fetch" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.messaging.v1.usecases.fetch()
    }.to raise_exception(Twilio::REST::TwilioError)

    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'get',
        url: 'https://messaging.twilio.com/v1/Services/Usecases',
    ))).to eq(true)
  end

  it "receives fetch responses" do
    @holodeck.mock(Twilio::Response.new(
        200,
      %q[
      {
          "usecases": [
              {
                  "usecase": "notifications",
                  "description": "Transactional notifications and Alerts for any Delivery, Account, Reminder, Order, Fraud, Security, Public Service, or Emergency announcements.",
                  "purpose": "Notify my users."
              },
              {
                  "usecase": "marketing",
                  "description": "Marketing messages may contain product information, offers, and calls to action to engage with your organization.",
                  "purpose": "Market my services."
              }
          ]
      }
      ]
    ))

    actual = @client.messaging.v1.usecases.fetch()

    expect(actual).to_not eq(nil)
  end
end